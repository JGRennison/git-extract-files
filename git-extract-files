#!/usr/bin/env perl

############################################################################
# FILE:                git-extract-files                                   #
# DESCRIPTION:         Creates a new history of the current branch         #
#                      containing only the specified files/directories     #
# AUTHOR:              Jonathan G. Rennison <j.g.rennison@gmail.com>       #
# LICENSE:             New BSD License, see LICENSE.txt                    #
#                                                                          #
# Copyright Â© Jonathan G. Rennison 2016                                    #
############################################################################

use strict;
use warnings;

use Proc::Hevy;
use Getopt::Long;

sub usage {
	my ($fh, $retcode) = @_;
	$fh //= \*STDERR;
	$retcode //= 1;
	print $fh <<'EOF';
usage: git extract-files [options] <files...>

    -l, --list-file <path>   Extract files enumerated in list file
    -s, --source <ref>       Use 'ref' instead of HEAD as the source commit
    -m, --move <from:to>     Move files from absolute path 'from' to 'to'
    -x, --exclude <path>     Exclude files from absolute path
    -b, --branch <branch>    Create a new branch pointing to the new commit
    -u, --until <rev>        Do not re-write commits reachable from 'rev'
    -r, --remove <rev>       Remove commits reachable from 'rev'
    -f, --fixup <rev>        Apply commit 'rev' as a fixup (if it has one parent)
    -n, --no-prune           Don't prune empty commits which leave the tree untouched
    -c, --keep-committer     Preserve committer name, email and date
    -v, --verbose            Be verbose
    -h, -?, --help           Show this help

Creates a new history of the current branch, containing
only the specified files/directories.
The new commit hash is written to STDOUT.

Excludes are applied before moves.
Only the first matching move for an individual file is applied.

EOF
	exit $retcode;
}

my ($help, @move_strs, @moves, @deletes, $branch, @until_strs, @untils, @remove_strs, @fixup_strs, $no_prune, $keep_committer, @list_files, $source);
my $verbose = 0;

Getopt::Long::Configure("no_auto_abbrev", "bundling");
GetOptions (
	"list-file|l=s"    => \@list_files,
	"source|s=s"   => \$source,
	"move|m=s"     => \@move_strs,
	"exclude|x=s"  => \@deletes,
	"branch|b=s"   => \$branch,
	"until|u=s"    => \@until_strs,
	"remove|r=s"   => \@remove_strs,
	"fixup|f=s"    => \@fixup_strs,
	"no-prune|n"   => \$no_prune,
	"keep-committer|c" => \$keep_committer,
	"help|h|?"     => \$help,
	"verbose|v+"   => \$verbose,
) or usage();
usage(\*STDOUT, 0) if $help;

usage() unless (scalar @ARGV || scalar @list_files);

my @paths = (@ARGV);

my $source_commit;
if (defined $source) {
	my $status_source = exec_wrapper(
		command => [qw(git rev-parse --verify), $source],
		stdout  => \$source_commit,
		stderr  => \*STDERR,
	);
	exit($status_source << 8) if $status_source;
	chomp $source_commit;
} else {
	$source_commit = "@";
}

for my $list_file (@list_files) {
	open my $file_handle, "<", $list_file or die "Could not open $list_file: $!\n";

	# TODO: Convert relative to absolute paths.
	while (<$file_handle>) {
		chomp;
		push @paths, $_ if length $_;
	}

	close $file_handle;
}

@paths = array_filter_uniq(@paths);

for (@move_strs) {
	my @sp = split(':', $_, -1);
	if (scalar @sp != 2) {
		print STDERR "'$_' is not a valid move\n";
		exit 1;
	}
	for (@sp) {
		s|^/||; # trim leading slash
		s|/$||; # trim trailing slash
	}
	push @moves, {
		from => $sp[0],
		to   => $sp[1],
	};
}

for (@until_strs) {
	my $rev;
	my $status_rev_parse = exec_wrapper(
		command => [qw(git rev-parse --verify), "$_^{commit}"],
		stdout  => \$rev,
		stderr  => \*STDERR,
	);
	exit($status_rev_parse << 8) if $status_rev_parse;
	chomp $rev;
	push @untils, "^$rev";
}

my %remove_commits;
for (@remove_strs) {
	my $rev;
	my $status_rev_parse = exec_wrapper(
		command => [qw(git rev-parse --verify), "$_^{commit}"],
		stdout  => \$rev,
		stderr  => \*STDERR,
	);
	exit($status_rev_parse << 8) if $status_rev_parse;
	chomp $rev;
	push @untils, "^$rev";
	$remove_commits{$rev} = 1;
}

my %fixup_commits;
for (@fixup_strs) {
	my $rev;
	my $status_rev_parse = exec_wrapper(
		command => [qw(git rev-parse --verify), "$_^{commit}"],
		stdout  => \$rev,
		stderr  => \*STDERR,
	);
	exit($status_rev_parse << 8) if $status_rev_parse;
	chomp $rev;
	$fixup_commits{$rev} = 1;
}

push @untils, '--sparse', '--full-history' if $no_prune;

my $log_str = '';
my $status_rev_log = exec_wrapper(
	command => [qw(git log --parents --reverse --pretty=tformat:%H%x00%P%x00%an%x00%ae%x00%ai%x00%cn%x00%ce%x00%ci%x00%B%x00%x00%x00 -z), $source_commit, @untils, '--', @paths],
	stdout  => \$log_str,
	stderr  => \*STDERR,
);
exit($status_rev_log << 8) if $status_rev_log;

my @revs;
for my $rev_str (split(/\000{4}/, $log_str)) {
	my ($hash, $parents, $author_name, $author_email, $author_date, $committer_name, $committer_email, $committer_date, $msg) = split(/\000/, $rev_str, -1);
	my @parent_revs = split(/\s+/, $parents);
	if (scalar %remove_commits) {
		@parent_revs = grep { !$remove_commits{$_} } @parent_revs;
	}
	my $prune = 0;
	if ($fixup_commits{$hash}) {
		if (scalar @parent_revs != 1) {
			print STDERR "Fixup: $hash has wrong number of parents: " . scalar @parent_revs . "\n";
			exit 1;
		}
		my $parent = $parent_revs[0];
		if (!(scalar @revs) || $revs[-1]->{hash} ne $parent) {
			print STDERR "Fixup: $hash has no usable parent to apply onto\n";
			exit 1;
		}
		$revs[-1]->{hash_for_tree} = $hash;
		delete $fixup_commits{$hash};
		$prune = 1;
	}
	push @revs, {
		hash => $hash,
		hash_for_tree => $hash,
		author_name => $author_name,
		author_email => $author_email,
		author_date => $author_date,
		committer_name => $committer_name,
		committer_email => $committer_email,
		committer_date => $committer_date,
		msg => $msg,
		parents => \@parent_revs,
		force_prune => $prune,
	};
}

if (scalar @revs == 0) {
	print STDERR "No commits found\n";
	exit 1;
}

if (scalar %fixup_commits) {
	print STDERR "Could not use commits as fixups: " . join("\n", keys %fixup_commits) . "\n";
	exit 1;
}

my (%commit_map, $last_rev);

for my $rev_info (@revs) {
	my $rev = $rev_info->{hash};
	my $rev_for_tree = $rev_info->{hash_for_tree};

	my @tree_text;
	for (@paths) {
		my $tree_line;
		my $status_ls_tree = exec_wrapper(
			command => [qw(git ls-tree -r -z), $rev_for_tree, $_],
			stdout  => \$tree_line,
			stderr  => \*STDERR,
		);
		exit($status_ls_tree << 8) if $status_ls_tree;
		push @tree_text, split(/\000/, $tree_line) if length $tree_line;
	}

	@tree_text = array_filter_uniq(@tree_text);

	my $tree_hash = make_tree(@tree_text);

	if ($rev_info->{force_prune} || (!$no_prune && scalar @{$rev_info->{parents}} == 1)) {
		my ($parent_rev, $parent_tree);
		if (defined (my $new_parent = $commit_map{$rev_info->{parents}->[0]})) {
			$parent_rev = $new_parent->{rev};
			$parent_tree = $new_parent->{tree_hash};
		} else {
			$parent_rev = $rev_info->{parents}->[0];
			my $status_parent_tree = exec_wrapper(
				command => [qw(git show -s --pretty=format:%T), "$parent_rev^{commit}"],
				stdout  => \$parent_tree,
				stderr  => \*STDERR,
			);
			exit($status_parent_tree << 8) if $status_parent_tree;
			chomp $parent_tree;
		}
		if ($tree_hash eq $parent_tree) {
			# tree is same as parent, prune commit
			$commit_map{$rev} = {
				rev       => $parent_rev,
				tree_hash => $tree_hash,
			};
			next;
		}
	}

	my @parent_opts;
	for (@{$rev_info->{parents}}) {
		push @parent_opts, '-p';
		if (defined (my $new_parent = $commit_map{$_})) {
			push @parent_opts, $new_parent->{rev};
		} else {
			push @parent_opts, $_;
		}
	}

	local $ENV{GIT_AUTHOR_DATE} = $rev_info->{author_date};
	local $ENV{GIT_AUTHOR_NAME} = $rev_info->{author_name};
	local $ENV{GIT_AUTHOR_EMAIL} = $rev_info->{author_email};
	local $ENV{GIT_COMMITTER_DATE} = $rev_info->{committer_date} if $keep_committer;
	local $ENV{GIT_COMMITTER_NAME} = $rev_info->{committer_name} if $keep_committer;
	local $ENV{GIT_COMMITTER_EMAIL} = $rev_info->{committer_email} if $keep_committer;

	my $new_rev;
	my $status_commit = exec_wrapper(
		command => [qw(git commit-tree), @parent_opts, '-m', $rev_info->{msg}, $tree_hash],
		stdout  => \$new_rev,
		stderr  => \*STDERR,
	);
	exit($status_commit << 8) if $status_commit;
	chomp $new_rev;

	$commit_map{$rev} = {
		rev       => $new_rev,
		tree_hash => $tree_hash,
	};
	$last_rev = $new_rev;
}


print "$last_rev\n";

if (defined $branch) {
	my $status_branch = exec_wrapper(
		command => [qw(git update-ref), "refs/heads/$branch", $last_rev, ''],
		stderr  => \*STDERR,
	);
	exit($status_branch << 8) if $status_branch;
}

exit 0;

sub make_tree_subdir {
	my ($dir) = @_;

	my $tree_text = '';
	foreach my $key (keys %{$dir}) {
		if (ref $dir->{$key} eq 'HASH') {
			$tree_text .= "040000 tree " . make_tree_subdir($dir->{$key}) . "\t$key\000";
		} else {
			$tree_text .= $dir->{$key} . "\000";
		}
	}

	if ($verbose >= 2) {
		print STDERR "git mktree STDIN: \n" . join("\n", split(/\000/, $tree_text)) . "\n\n";
	}

	my $tree_hash;
	my $status_mktree = exec_wrapper(
		command => [qw(git mktree -z)],
		stdin   => $tree_text,
		stdout  => \$tree_hash,
		stderr  => \*STDERR,
	);
	exit($status_mktree << 8) if $status_mktree;
	chomp $tree_hash;
	return $tree_hash;
}

sub make_tree {
	my @objs = @_;

	my $tree = {};
	OBJ: for (@objs) {
		my ($mode, $type, $hash, $name) = split(/\s+/, $_, 4);
		for (@deletes) {
			next OBJ if $name =~ /^\Q$_\E(?:\/|$)/;
		}
		for (@moves) {
			last if $name =~ s/^\Q@{[ $_->{from} ]}\E(\/|$)/@{[ $_->{to} ]}$1/;
		}
		$name =~ s|^/||; # trim leading slash
		my @path_parts = split('/', $name);
		my $last_path_part = pop @path_parts;
		my $str = "$mode $type $hash\t" . $last_path_part;

		my $subtree = $tree;
		for (@path_parts) {
			if (exists $subtree->{$_}) {
				if(ref $subtree->{$_} ne 'HASH') {
					print STDERR "Attempted to map more than one file/directory to path: $name\n";
					exit 1;
				}
			} else {
				$subtree->{$_} = {};
			}
			$subtree = $subtree->{$_};
		}
		if (exists $subtree->{$last_path_part}) {
			print STDERR "Attempted to map more than one file/directory to path: $name\n";
			exit 1;
		}
		$subtree->{$last_path_part} = $str;
	}

	return make_tree_subdir($tree);
}

sub exec_wrapper {
	my %opts = @_;
	if ($verbose >= 1) {
		my $command;
		eval {
			require String::ShellQuote;
			$command = String::ShellQuote::shell_quote(@{ $opts{command} });
		};
		$command = join(" ", @{ $opts{command} }) unless defined $command;
		print STDERR "Executing: $command\n";
	}
	my $status = Proc::Hevy->exec(%opts);
	if ($verbose >= 2 && defined $opts{stdout} && ref $opts{stdout} eq "SCALAR") {
		print STDERR "STDOUT: '" . (${ $opts{stdout} } // '') . "'\n";
	}
	return $status;
}

sub array_filter_uniq {
	my %seen;
	grep !$seen{$_}++, @_;
}
